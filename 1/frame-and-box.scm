(define-class <style-rule> ()
  ((specificity :init-keyword :specificity)
   (rule :init-keyword :rule)))


(define-class <box> ()
  ((mom  :init-value #f)
   (kids :init-value '() :init-keyword :kids)
   (frame  :init-value #f)
   (id     :init-keyword :id)
   (class  :init-keyword :class)
   (text   :init-keyword :text)
   (style-rules :init-value '())
   (style  :init-value (make-hash-table))))

(define-class <frame> ()
  ((pos :init-keyword :pos)
   (size :init-value #(0 0))
   (kids :init-value '() :init-keyword :kids)
   (style :init-value (make-hash-table))))

(define-class <text-frame> (<frame>)
  ((text :init-keyword :text)))
(define-class <single-glyph-frame>  (<text-frame>) ())

(define-method flow ((f <frame>))
  (define ptr (vector 0 0))
  (when (not (~ f 'text))
    (for-each (^k
        (case (~ f 'style :flow)
          ((vertical)   (rel-move-to ptr 0 (~ f 'style :margin-top)))
          ((horizontal) (rel-move-to ptr (~ f 'style :margin-left) 0)))
        (set! (~ k 'pos) (map-to <vector> + ptr (~ f 'pos)))
        (flow k)
        (when (move-pointer f ptr (~ k 'size) k)
          (case (~ f 'style :flow)
            ((vertical)   (rel-move-to ptr 0 (~ f 'style :margin-top)))
            ((horizontal) (rel-move-to ptr (~ f 'style :margin-left) 0)))
          (set! (~ k 'pos) (map-to <vector> + ptr (~ f 'pos)))
          (flow k)
          (move-pointer f ptr (~ k 'size) k)))
      (~ f 'kids))
    (case (~ f 'style :flow) 
      ((vertical)   (rel-move-to ptr (~ f 'style :line-height) 0))
      ((horizontal) (rel-move-to ptr 0 (~ f 'style :line-height))))
    (set! (~ f 'size) ptr)))

(define (move-pointer f ptr v m)
  (case (~ f 'style :flow)
    ((horizontal) (rel-move-to ptr (+ (~ m 'style :margin-right) (~ v 0)) 0))
    ((vertical)   (rel-move-to ptr 0 (+ (~ m 'style :margin-bottom) (~ v 1)))))
  (if (apply func-or (map > ptr (~ f 'style :max-size)))
    (case (~ f 'style :flow)
      ((horizontal) (set! (~ ptr 0) 0) (rel-move-to ptr 0 (~ f 'style :line-height)) #t)
      ((vertical)   (set! (~ ptr 1) 0) (rel-move-to ptr (~ f 'style :line-height)) #t)) #f))

(define (func-or . a)
  (if (null? a) #f (or (car a) (apply func-or (cdr a)))))

(define-class <flow-context> ()
  ((pos :init-value #(0 0))))

(define (rel-move-to v x y)
  (update! (~ v 0) (pa$ + x))
  (update! (~ v 1) (pa$ + y)))
   
(define-class <style-props> ()
  ((spec :init-keyword :spec)
   (prop :init-keyword :prop)
   (rule :init-keyword :rule)))
